{"remainingRequest":"/Users/darylkoh/Downloads/seevee/node_modules/babel-loader/lib/index.js!/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue","mtime":1617050334874},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CandidateClaim.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <hdrCan></hdrCan>\n    <br><hr>\n    <p> <b> Claim </b> </p>\n    <button class=\"switch\" v-on:click=\"showAcad\"> Academic </button>\n    <button class=\"switch\" v-on:click=\"showExp\"> Expereince </button>\n    <div v-if=\"this.switch.acad\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"acad.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Module Code: </label>\n        <input type=\"text\" v-model=\"acad.modCode\" placeholder=\"Module Code\"/> <br>\n        <label> Grade: </label>\n        <input type=\"text\" v-model=\"acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <br>\n        <button v-on:click.prevent=\"claimAcad\"> Submit Academic Claim </button>\n    </form>\n    <br>\n    </div>\n    <div v-if=\"this.switch.exp\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"exp.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Start Date: </label>\n        <input type=\"text\" v-model=\"exp.startDate\" placeholder=\"Start Dates\"/> <br>\n        <label> End Date: </label>\n        <input type=\"text\" v-model=\"exp.endDate\" placeholder=\"End Date\"/> <br>\n        <!-- COMPANY WILL KEY IN THIS INFO???... DOESNT RLLY MAKE SENSE FOR CANDIDATE TO KEY THIS IN....-->\n        <!--label> Performance: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <label> Comments: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br-->\n        <br>\n        <button v-on:click.prevent=\"claimExp\"> Submit Experience Claim </button>\n    </form>\n    <br>\n    </div>\n    <hr>\n    <div v-if=\"this.res.success\">\n    <p> Credential claim submitted successfully. <b> Your claim id is: <u> {{this.res.id}} </u> </b> </p>\n    </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport database from '../firebase.js' //to log our data\n\nexport default {\n  name: \"app\",\n  computed: {\n      ...mapGetters(\"accounts\",[\"activeAccount\",\"activeBalance\"]),\n      ...mapGetters(\"drizzle\",[\"drizzleInstance\",\"isDrizzleInitialized\"]),\n  },\n  methods: {\n      async dummy() {\n          console.log(database);\n      },\n      showAcad() {\n          this.switch.acad = true;\n          this.switch.exp = false;\n      },\n      showExp() {\n          this.switch.acad = false;\n          this.switch.exp = true;\n      },\n      async claimAcad() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               }\n           });\n          await this.drizzleInstance\n            .contracts\n            .Credential\n            .methods\n            .createClaim(this.acad.inst, this.res.docRef)\n            .send().then(async () => {\n                this.res.success = true;\n                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n            }).catch((err) => {\n                this.res.success = false;\n                this.res.id = 0;\n                console.log(err);\n            });\n      },\n      async claimExp() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               }\n           });\n          await this.drizzleInstance\n            .contracts\n            .Credential\n            .methods\n            .createClaim(this.exp.inst, this.res.docRef)\n            .send().then(async () => {\n                this.res.success = true;\n                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n            }).catch((err) => {\n                this.res.success = false;\n                this.res.id = 0;\n                console.log(err);\n            });\n      },\n  },\n  data() {\n      return {\n          // all these data will serve as arguments to our contract calls\n          switch: {\n              acad: true,\n              exp: false,\n          },\n          acad: {\n              inst: '',\n              addr: '',\n              modCode: '',\n              grade: '',\n          },\n          exp: {\n              inst: '',\n              addr: '',\n              startDate: '',\n              endDate: '',\n              performanceRating: '',\n              comments: '',\n          },\n          res: {\n            success: false,\n            id: 0,\n            docRef: '',\n          },\n      }\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.switch {\n    background-color: white;\n    color: black;\n    border: 2px solid black;\n    padding: 0px 5px 0px 5px;\n    margin: 0px 5px 0px 5px;\n    outline: none;\n}\n\nlabel {\n    display: inline-block;\n    width: 140px;\n    text-align: right;\n}\n</style>\n\n\n\n\n"],"sourceRoot":"src/components"}]}