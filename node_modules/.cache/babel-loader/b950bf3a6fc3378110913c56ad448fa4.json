{"remainingRequest":"/Users/darylkoh/Downloads/seevee/node_modules/babel-loader/lib/index.js!/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue","mtime":1617075850828},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kYXJ5bGtvaC9Eb3dubG9hZHMvc2VldmVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2Rhcnlsa29oL0Rvd25sb2Fkcy9zZWV2ZWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IGRhdGFiYXNlIGZyb20gJy4uL2ZpcmViYXNlLmpzJzsgLy90byBsb2cgb3VyIGRhdGEKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiYXBwIiwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBHZXR0ZXJzKCJhY2NvdW50cyIsIFsiYWN0aXZlQWNjb3VudCIsICJhY3RpdmVCYWxhbmNlIl0pKSwgbWFwR2V0dGVycygiZHJpenpsZSIsIFsiZHJpenpsZUluc3RhbmNlIiwgImlzRHJpenpsZUluaXRpYWxpemVkIl0pKSwKICBtZXRob2RzOiB7CiAgICBkdW1teTogZnVuY3Rpb24gZHVtbXkoKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YWJhc2UpOwoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2hvd0FjYWQ6IGZ1bmN0aW9uIHNob3dBY2FkKCkgewogICAgICB0aGlzLnN3aXRjaC5hY2FkID0gdHJ1ZTsKICAgICAgdGhpcy5zd2l0Y2guZXhwID0gZmFsc2U7CiAgICB9LAogICAgc2hvd0V4cDogZnVuY3Rpb24gc2hvd0V4cCgpIHsKICAgICAgdGhpcy5zd2l0Y2guYWNhZCA9IGZhbHNlOwogICAgICB0aGlzLnN3aXRjaC5leHAgPSB0cnVlOwogICAgfSwKICAgIGNsYWltQWNhZDogZnVuY3Rpb24gY2xhaW1BY2FkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyhfdGhpcy5hY3RpdmVBY2NvdW50KS5nZXQoKS50aGVuKGZ1bmN0aW9uIChkb2MpIHsKICAgICAgICAgICAgICAgICAgaWYgKCFkb2MuZXhpc3RzKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2MoX3RoaXMuYWN0aXZlQWNjb3VudCkuc2V0KHt9KTsKICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyhfdGhpcy5hY3RpdmVBY2NvdW50KS5jb2xsZWN0aW9uKCJhY2FkcyIpLmFkZCh7CiAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVBZGRyZXNzOiBfdGhpcy5hY3RpdmVBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgaW5zdGl0dXRpb25BZGRyZXNzOiBfdGhpcy5hY2FkLmluc3QsCiAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVDb2RlOiBfdGhpcy5hY2FkLm1vZENvZGUsCiAgICAgICAgICAgICAgICAgICAgICBncmFkZUF0dGFpbmVkOiBfdGhpcy5hY2FkLmdyYWRlCiAgICAgICAgICAgICAgICAgICAgfSkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChkb2NSZWYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXMuZG9jUmVmID0gZG9jUmVmLmlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZHJpenpsZUluc3RhbmNlLmNvbnRyYWN0cy5DcmVkZW50aWFsLm1ldGhvZHMuY3JlYXRlQ2xhaW0oX3RoaXMuYWNhZC5pbnN0LCBfdGhpcy5yZXMuZG9jUmVmKS5zZW5kKCkudGhlbiggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXMuc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRyaXp6bGVJbnN0YW5jZS5jb250cmFjdHMuQ3JlZGVudGlhbC5tZXRob2RzLmdldENsYWltSWQoKS5jYWxsKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXMuaWQgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpLmNhdGNoKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXMuc3VjY2VzcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcy5pZCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0oKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2MoX3RoaXMuYWN0aXZlQWNjb3VudCkuY29sbGVjdGlvbigiYWNhZHMiKS5hZGQoewogICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlQWRkcmVzczogX3RoaXMuYWN0aXZlQWNjb3VudCwKICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uQWRkcmVzczogX3RoaXMuYWNhZC5pbnN0LAogICAgICAgICAgICAgICAgICAgICAgbW9kdWxlQ29kZTogX3RoaXMuYWNhZC5tb2RDb2RlLAogICAgICAgICAgICAgICAgICAgICAgZ3JhZGVBdHRhaW5lZDogX3RoaXMuYWNhZC5ncmFkZQogICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KGRvY1JlZikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcy5kb2NSZWYgPSBkb2NSZWYuaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5kcml6emxlSW5zdGFuY2UuY29udHJhY3RzLkNyZWRlbnRpYWwubWV0aG9kcy5jcmVhdGVDbGFpbShfdGhpcy5hY2FkLmluc3QsIF90aGlzLnJlcy5kb2NSZWYpLnNlbmQoKS50aGVuKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcy5zdWNjZXNzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZHJpenpsZUluc3RhbmNlLmNvbnRyYWN0cy5DcmVkZW50aWFsLm1ldGhvZHMuZ2V0Q2xhaW1JZCgpLmNhbGwoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcy5pZCA9IF9jb250ZXh0NS5zZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSkuY2F0Y2goIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KGVycikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlcy5zdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzLmlkID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3g0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmNi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9KCkpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2xhaW1FeHA6IGZ1bmN0aW9uIGNsYWltRXhwKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2MoX3RoaXMyLmFjdGl2ZUFjY291bnQpLmdldCgpLnRoZW4oZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgICAgICAgICBpZiAoIWRvYy5leGlzdHMpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyhfdGhpczIuYWN0aXZlQWNjb3VudCkuc2V0KHt9KTsKICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyhfdGhpczIuYWN0aXZlQWNjb3VudCkuY29sbGVjdGlvbigiZXhwIikuYWRkKHsKICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUFkZHJlc3M6IF90aGlzMi5hY3RpdmVBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgaW5zdGl0dXRpb25BZGRyZXNzOiBfdGhpczIuZXhwLmluc3QsCiAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGU6IF90aGlzMi5leHAuc3RhcnREYXRlLAogICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZTogX3RoaXMyLmV4cC5lbmREYXRlLAogICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWFuY2VSYXRpbmc6IF90aGlzMi5leHAucGVyZm9ybWFuY2VSYXRpbmcsCiAgICAgICAgICAgICAgICAgICAgICBjb21tZW50czogX3RoaXMyLmV4cC5jb21tZW50cwogICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjcgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMShkb2NSZWYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTEucHJldiA9IF9jb250ZXh0MTEubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlcy5kb2NSZWYgPSBkb2NSZWYuaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmRyaXp6bGVJbnN0YW5jZS5jb250cmFjdHMuQ3JlZGVudGlhbC5tZXRob2RzLmNyZWF0ZUNsYWltKF90aGlzMi5leHAuaW5zdCwgX3RoaXMyLnJlcy5kb2NSZWYpLnNlbmQoKS50aGVuKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5yZXMuc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5kcml6emxlSW5zdGFuY2UuY29udHJhY3RzLkNyZWRlbnRpYWwubWV0aG9kcy5nZXRDbGFpbUlkKCkuY2FsbCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlcy5pZCA9IF9jb250ZXh0OS5zZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSkuY2F0Y2goIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlcy5zdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlcy5pZCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3g2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmOS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxMSk7CiAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWY3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0oKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2MoX3RoaXMyLmFjdGl2ZUFjY291bnQpLmNvbGxlY3Rpb24oImV4cCIpLmFkZCh7CiAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVBZGRyZXNzOiBfdGhpczIuYWN0aXZlQWNjb3VudCwKICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uQWRkcmVzczogX3RoaXMyLmV4cC5pbnN0LAogICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlOiBfdGhpczIuZXhwLnN0YXJ0RGF0ZSwKICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGU6IF90aGlzMi5leHAuZW5kRGF0ZSwKICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlUmF0aW5nOiBfdGhpczIuZXhwLnBlcmZvcm1hbmNlUmF0aW5nLAogICAgICAgICAgICAgICAgICAgICAgY29tbWVudHM6IF90aGlzMi5leHAuY29tbWVudHMKICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxMCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE0KGRvY1JlZikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE0JChfY29udGV4dDE0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNC5wcmV2ID0gX2NvbnRleHQxNC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVzLmRvY1JlZiA9IGRvY1JlZi5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZHJpenpsZUluc3RhbmNlLmNvbnRyYWN0cy5DcmVkZW50aWFsLm1ldGhvZHMuY3JlYXRlQ2xhaW0oX3RoaXMyLmV4cC5pbnN0LCBfdGhpczIucmVzLmRvY1JlZikuc2VuZCgpLnRoZW4oIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVzLnN1Y2Nlc3MgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmRyaXp6bGVJbnN0YW5jZS5jb250cmFjdHMuQ3JlZGVudGlhbC5tZXRob2RzLmdldENsYWltSWQoKS5jYWxsKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVzLmlkID0gX2NvbnRleHQxMi5zZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUxMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKS5jYXRjaCggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMyhlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTMucHJldiA9IF9jb250ZXh0MTMubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlcy5zdWNjZXNzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnJlcy5pZCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3g4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTQpOwogICAgICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3g3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMTAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfSgpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTE1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2hlY2tIYXNoOiBmdW5jdGlvbiBjaGVja0hhc2goKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE2KCkgewogICAgICAgIHZhciBzLCBoc2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE2LnByZXYgPSBfY29udGV4dDE2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5kcml6emxlSW5zdGFuY2UuY29udHJhY3RzLkNyZWRlbnRpYWwubWV0aG9kcy5nZXRTdGF0dXMoX3RoaXMzLnJlcy5pZCkuY2FsbCgpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBzID0gX2NvbnRleHQxNi5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZHJpenpsZUluc3RhbmNlLmNvbnRyYWN0cy5DcmVkZW50aWFsLm1ldGhvZHMudmlld0NsYWltKF90aGlzMy5yZXMuaWQpLmNhbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgaHNoID0gX2NvbnRleHQxNi5zZW50OwogICAgICAgICAgICAgICAgY29uc29sZS5sb2cocyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhoc2gpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNik7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIC8vIGFsbCB0aGVzZSBkYXRhIHdpbGwgc2VydmUgYXMgYXJndW1lbnRzIHRvIG91ciBjb250cmFjdCBjYWxscwogICAgICBzd2l0Y2g6IHsKICAgICAgICBhY2FkOiB0cnVlLAogICAgICAgIGV4cDogZmFsc2UKICAgICAgfSwKICAgICAgYWNhZDogewogICAgICAgIGluc3Q6ICcnLAogICAgICAgIGFkZHI6ICcnLAogICAgICAgIG1vZENvZGU6ICcnLAogICAgICAgIGdyYWRlOiAnJwogICAgICB9LAogICAgICBleHA6IHsKICAgICAgICBpbnN0OiAnJywKICAgICAgICBhZGRyOiAnJywKICAgICAgICBzdGFydERhdGU6ICcnLAogICAgICAgIGVuZERhdGU6ICcnLAogICAgICAgIHBlcmZvcm1hbmNlUmF0aW5nOiAnJywKICAgICAgICBjb21tZW50czogJycKICAgICAgfSwKICAgICAgcmVzOiB7CiAgICAgICAgc3VjY2VzczogZmFsc2UsCiAgICAgICAgaWQ6IDAsCiAgICAgICAgZG9jUmVmOiAnJwogICAgICB9CiAgICB9OwogIH0KfTs="},{"version":3,"sources":["CandidateClaim.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <hdrCan></hdrCan>\n    <br><hr>\n    <p> <b> Claim </b> </p>\n    <button class=\"switch\" v-on:click=\"showAcad\"> Academic </button>\n    <button class=\"switch\" v-on:click=\"showExp\"> Expereince </button>\n    <div v-if=\"this.switch.acad\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"acad.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Module Code: </label>\n        <input type=\"text\" v-model=\"acad.modCode\" placeholder=\"Module Code\"/> <br>\n        <label> Grade: </label>\n        <input type=\"text\" v-model=\"acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <br>\n        <button v-on:click.prevent=\"claimAcad\"> Submit Academic Claim </button>\n    </form>\n    <br>\n    </div>\n    <div v-if=\"this.switch.exp\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"exp.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Start Date: </label>\n        <input type=\"text\" v-model=\"exp.startDate\" placeholder=\"Start Dates\"/> <br>\n        <label> End Date: </label>\n        <input type=\"text\" v-model=\"exp.endDate\" placeholder=\"End Date\"/> <br>\n        <!-- COMPANY WILL KEY IN THIS INFO???... DOESNT RLLY MAKE SENSE FOR CANDIDATE TO KEY THIS IN....-->\n        <!--label> Performance: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <label> Comments: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br-->\n        <br>\n        <button v-on:click.prevent=\"claimExp\"> Submit Experience Claim </button>\n    </form>\n    <br>\n    </div>\n    <hr>\n    <div v-if=\"this.res.success\">\n    <p> Credential claim submitted successfully. <b> Your claim id is: <u> {{this.res.id}} </u> </b> </p>\n    </div>\n    <br><hr><br>\n    <button v-on:click.prevent=\"checkHash\"> Check Doc </button>\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport database from '../firebase.js' //to log our data\n\nexport default {\n  name: \"app\",\n  computed: {\n      ...mapGetters(\"accounts\",[\"activeAccount\",\"activeBalance\"]),\n      ...mapGetters(\"drizzle\",[\"drizzleInstance\",\"isDrizzleInitialized\"]),\n  },\n  methods: {\n      async dummy() {\n          console.log(database);\n      },\n      showAcad() {\n          this.switch.acad = true;\n          this.switch.exp = false;\n      },\n      showExp() {\n          this.switch.acad = false;\n          this.switch.exp = true;\n      },\n      async claimAcad() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.acad.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.acad.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               }\n           });\n      },\n      async claimExp() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.exp.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.exp.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               }\n           });\n      },\n      async checkHash() {\n          var s = await this.drizzleInstance.contracts.Credential.methods.getStatus(this.res.id).call();\n          var hsh = await this.drizzleInstance.contracts.Credential.methods.viewClaim(this.res.id).call();\n          console.log(s);\n          console.log(hsh);\n      },\n  },\n  data() {\n      return {\n          // all these data will serve as arguments to our contract calls\n          switch: {\n              acad: true,\n              exp: false,\n          },\n          acad: {\n              inst: '',\n              addr: '',\n              modCode: '',\n              grade: '',\n          },\n          exp: {\n              inst: '',\n              addr: '',\n              startDate: '',\n              endDate: '',\n              performanceRating: '',\n              comments: '',\n          },\n          res: {\n            success: false,\n            id: 0,\n            docRef: '',\n          },\n      }\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.switch {\n    background-color: white;\n    color: black;\n    border: 2px solid black;\n    padding: 0px 5px 0px 5px;\n    margin: 0px 5px 0px 5px;\n    outline: none;\n}\n\nlabel {\n    display: inline-block;\n    width: 140px;\n    text-align: right;\n}\n</style>\n\n\n\n\n"],"sourceRoot":"src/components"}]}