{"remainingRequest":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/src/App.vue","mtime":1616147543773},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JwppbXBvcnQgZGF0YWJhc2UgZnJvbSAnLi9maXJlYmFzZS5qcycgLy90byBsb2cgb3VyIGRhdGEKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiYXBwIiwKICBjb21wdXRlZDogewogICAgICAuLi5tYXBHZXR0ZXJzKCJkcml6emxlIixbImRyaXp6bGVJbnN0YW5jZSIsImlzRHJpenpsZUluaXRpYWxpemVkIl0pLAogIH0sCiAgbWV0aG9kczogewogICAgICBhc3luYyBnZXRHcmFkZSgpIHsKICAgICAgICAgIC8vIFJldHJpZXZlIHZhbHVlIHVzaW5nICIuY2FsbCgpJwogICAgICAgICAgdGhpcy52aWV3LmdyYWRlID0gYXdhaXQgdGhpcy5kcml6emxlSW5zdGFuY2UKICAgICAgICAgICAgLmNvbnRyYWN0cwogICAgICAgICAgICAuQ3JlZGVudGlhbAogICAgICAgICAgICAubWV0aG9kcwogICAgICAgICAgICAudmlld0dyYWRlKHRoaXMudmlldy5hZGRyLCB0aGlzLnZpZXcubW9kQ29kZSkKICAgICAgICAgICAgLmNhbGwoKTsgCiAgICAgICB9LAogICAgICAgYXN5bmMgbWludFRva2VuKCkgewogICAgICAgICAgIC8vIFJldHJpZXZlIHZhbHVlIHVzaW5nICIuc2VuZCgpIgogICAgICAgICAgIGF3YWl0IHRoaXMuZHJpenpsZUluc3RhbmNlCiAgICAgICAgICAgICAuY29udHJhY3RzCiAgICAgICAgICAgICAuQ3JlZGVudGlhbAogICAgICAgICAgICAgLm1ldGhvZHMKICAgICAgICAgICAgIC5taW50QWNhZCh0aGlzLm1pbnQuYWRkciwgdGhpcy5taW50Lm1vZENvZGUsIHRoaXMubWludC5ncmFkZSkKICAgICAgICAgICAgIC5zZW5kKCk7CiAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2ModGhpcy5taW50LmFkZHIpLmdldCgpLnRoZW4oZG9jID0+IHsKICAgICAgICAgICAgICAgaWYgKCFkb2MuZXhpc3RzKSB7CiAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyh0aGlzLm1pbnQuYWRkcikuc2V0KHt9KTsKICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLmNvbGxlY3Rpb24oInN0dWRlbnRzIikuZG9jKHRoaXMubWludC5hZGRyKS5jb2xsZWN0aW9uKCJhY2FkcyIpLmFkZCh7CiAgICAgICAgICAgICAgICAgICAgICAgc3R1ZGVudEFkZHJlc3M6IHRoaXMubWludC5hZGRyLAogICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZUNvZGU6IHRoaXMubWludC5tb2RDb2RlLAogICAgICAgICAgICAgICAgICAgICAgIGdyYWRlQXR0YWluZWQ6IHRoaXMubWludC5ncmFkZSwKICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2ModGhpcy5taW50LmFkZHIpLmNvbGxlY3Rpb24oImFjYWRzIikuYWRkKHsKICAgICAgICAgICAgICAgICAgICAgICBzdHVkZW50QWRkcmVzczogdGhpcy5taW50LmFkZHIsCiAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlQ29kZTogdGhpcy5taW50Lm1vZENvZGUsCiAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGVBdHRhaW5lZDogdGhpcy5taW50LmdyYWRlLAogICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICB9KTsKICAgICAgIH0sCiAgICAgICBhc3luYyBnZXRDb3VudCgpIHsKICAgICAgICAgIHRoaXMuY250Lm51bSA9IGF3YWl0IHRoaXMuZHJpenpsZUluc3RhbmNlCiAgICAgICAgICAgIC5jb250cmFjdHMKICAgICAgICAgICAgLkNyZWRlbnRpYWwKICAgICAgICAgICAgLm1ldGhvZHMKICAgICAgICAgICAgLnN0dWRlbnRBY2FkQ291bnQodGhpcy5jbnQuYWRkcikKICAgICAgICAgICAgLmNhbGwoKTsKICAgICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgICAvLyBhbGwgdGhlc2UgZGF0YSB3aWxsIHNlcnZlIGFzIGFyZ3VtZW50cyB0byBvdXIgY29udHJhY3QgY2FsbHMKICAgICAgICAgIHZpZXc6IHsKICAgICAgICAgICAgYWRkcjogJycsCiAgICAgICAgICAgIG1vZENvZGU6ICcnLAogICAgICAgICAgICBncmFkZTogJycsCiAgICAgICAgICB9LAogICAgICAgICAgbWludDogewogICAgICAgICAgICAgIGFkZHI6ICcnLAogICAgICAgICAgICAgIG1vZENvZGU6ICcnLAogICAgICAgICAgICAgIGdyYWRlOiAnJywKICAgICAgICAgIH0sCiAgICAgICAgICBjbnQ6IHsKICAgICAgICAgICAgICBhZGRyOiAnJywKICAgICAgICAgICAgICBudW06ICcnCiAgICAgICAgICB9CiAgICAgIH0KICB9LAp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<!--\n// (1) Drizzle template tag to return a contract call\n<drizzle-contract\n    contractName=\"Credential\"\n    method=\"owner\"\n    label=\"Value\"\n/>\n// (2) Drizzle template to call a contract with its arguments\n<drizzle-contract-form\n    contractName=\"Credential\"\n    method=\"mintAcad\"\n    :placeholders=\"['studentAddress','moduleCode','moduleGrade']\"\n/>\n// (3) Drizzle template limitations:\n// - dizzle-contract cannot call viewing functions with arguments!?:w\n\n// - drizzle-contract-form cannot add fields or retireve field values; hidden by drizzle abstraction! - cannot log into firebase.\n-->\n<template>\n<div>\n    <div v-if=\"isDrizzleInitialized\">\n        <h1 style=\"color: green\"> LOADED SUCCESSFULLY </h1>\n        <br><hr><br>\n        <h1> OWNER ACCOUNT </h1>\n        <drizzle-contract\n            contractName=\"Credential\"\n            method=\"owner\"\n            label=\"Value\"\n        />\n        <br><hr><br>\n        <h1> CURRENT METAMASK ACCOUNT </h1>\n        <!-- units=\"Ether\" will throw a BigNuber error in the console! -->\n        <drizzle-account units=\"Wei\" :precision=\"2\"/>\n        <br><hr><br>\n        <h1> MINTING ACAD TOKEN </h1>\n        <drizzle-contract\n            contractName=\"Credential\"\n            method=\"tokenId\"\n            label=\"Number of Acads Minted\"\n        />\n        <!-- START MINT ACAD OPTION (1) -->\n        <!--drizzle-contract-form\n            contractName=\"Credential\"\n            method=\"mintAcad\"\n            :placeholders=\"['studentAddress','moduleCode','moduleGrade']\"\n        /-->\n        <!-- END MINT ACAD OPTION (1) -->\n\n        <!-- START MINT ACAD OPTION (2) -->\n        <form>\n        <input type=\"text\" v-model=\"mint.addr\" placeholder=\"Insert student address\"/>\n        <input type=\"text\" v-model=\"mint.modCode\" placeholder=\"Insert module code\"/>\n        <input type=\"text\" v-model=\"mint.grade\" placeholder=\"Module Grade\"/>\n        <button v-on:click.prevent=\"mintToken\"> Mint Token </button>\n        </form>\n        <!-- END MINT ACAD OPTION (2) -->\n\n        <br><hr><br>\n        <h1> VIEWING ACAD TOKEN </h1>\n        <form>\n        <input type=\"text\" v-model=\"view.addr\" placeholder=\"Insert student address\"/>\n        <input type=\"text\" v-model=\"view.modCode\" placeholder=\"Insert module code\"/>\n        <button v-on:click.prevent=\"getGrade\"> Get Grade </button>\n        </form>\n        <p> GRADE: {{this.view.grade}}</p> \n        <br><hr><br>\n\n        <h1> COUNTING ACAD TOKEN </h1>\n        <form>\n        <input type=\"text\" v-model=\"cnt.addr\" placeholder=\"Insert student address\"/>\n        <button v-on:click.prevent=\"getCount\"> Get Count </button>\n        </form>\n        <p> NUMBER OF TOKENS: {{this.cnt.num}}</p> \n        <br><hr><br>\n\n\n\n    </div>\n    <div v-else>\n        <h1 style=\"color:red\"> LOADING..... </h1>\n    </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport database from './firebase.js' //to log our data\n\nexport default {\n  name: \"app\",\n  computed: {\n      ...mapGetters(\"drizzle\",[\"drizzleInstance\",\"isDrizzleInitialized\"]),\n  },\n  methods: {\n      async getGrade() {\n          // Retrieve value using \".call()'\n          this.view.grade = await this.drizzleInstance\n            .contracts\n            .Credential\n            .methods\n            .viewGrade(this.view.addr, this.view.modCode)\n            .call(); \n       },\n       async mintToken() {\n           // Retrieve value using \".send()\"\n           await this.drizzleInstance\n             .contracts\n             .Credential\n             .methods\n             .mintAcad(this.mint.addr, this.mint.modCode, this.mint.grade)\n             .send();\n           database.collection(\"students\").doc(this.mint.addr).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.mint.addr).set({});\n                   database.collection(\"students\").doc(this.mint.addr).collection(\"acads\").add({\n                       studentAddress: this.mint.addr,\n                       moduleCode: this.mint.modCode,\n                       gradeAttained: this.mint.grade,\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.mint.addr).collection(\"acads\").add({\n                       studentAddress: this.mint.addr,\n                       moduleCode: this.mint.modCode,\n                       gradeAttained: this.mint.grade,\n                   });\n               }\n           });\n       },\n       async getCount() {\n          this.cnt.num = await this.drizzleInstance\n            .contracts\n            .Credential\n            .methods\n            .studentAcadCount(this.cnt.addr)\n            .call();\n       }\n  },\n  data() {\n      return {\n          // all these data will serve as arguments to our contract calls\n          view: {\n            addr: '',\n            modCode: '',\n            grade: '',\n          },\n          mint: {\n              addr: '',\n              modCode: '',\n              grade: '',\n          },\n          cnt: {\n              addr: '',\n              num: ''\n          }\n      }\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n\n"]}]}