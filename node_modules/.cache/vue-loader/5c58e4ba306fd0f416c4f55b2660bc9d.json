{"remainingRequest":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue","mtime":1617101842636},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYXBwIHsKICBmb250LWZhbWlseTogQXZlbmlyLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAjMmMzZTUwOwogIG1hcmdpbi10b3A6IDYwcHg7Cn0KCi5zd2l0Y2ggewogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICBjb2xvcjogYmxhY2s7CiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjazsKICAgIHBhZGRpbmc6IDBweCA1cHggMHB4IDVweDsKICAgIG1hcmdpbjogMHB4IDVweCAwcHggNXB4OwogICAgb3V0bGluZTogbm9uZTsKfQoKbGFiZWwgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgd2lkdGg6IDE0MHB4OwogICAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0K"},{"version":3,"sources":["CandidateClaim.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CandidateClaim.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n    <hdrCan></hdrCan>\n    <br><hr>\n    <p> <b> Claim </b> </p>\n    <button class=\"switch\" v-on:click=\"showAcad\"> Academic </button>\n    <button class=\"switch\" v-on:click=\"showExp\"> Experience </button>\n    <div v-if=\"this.switch.acad\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"acad.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Module Code: </label>\n        <input type=\"text\" v-model=\"acad.modCode\" placeholder=\"Module Code\"/> <br>\n        <label> Grade: </label>\n        <input type=\"text\" v-model=\"acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <br>\n        <button v-on:click.prevent=\"claimAcad\"> Submit Academic Claim </button>\n    </form>\n    <br>\n    </div>\n    <div v-if=\"this.switch.exp\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"exp.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Start Date: </label>\n        <input type=\"text\" v-model=\"exp.startDate\" placeholder=\"Start Dates\"/> <br>\n        <label> End Date: </label>\n        <input type=\"text\" v-model=\"exp.endDate\" placeholder=\"End Date\"/> <br>\n        <!-- COMPANY WILL KEY IN THIS INFO???... DOESNT RLLY MAKE SENSE FOR CANDIDATE TO KEY THIS IN....-->\n        <!--label> Performance: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <label> Comments: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br-->\n        <br>\n        <button v-on:click.prevent=\"claimExp\"> Submit Experience Claim </button>\n    </form>\n    <br>\n    </div>\n    <hr>\n    <div v-if=\"this.res.success\">\n    <p> Credential claim submitted successfully. <b> Your claim id is: <u> {{this.res.id}} </u> </b> </p>\n    </div>\n    <!--br><hr><br>\n    <button v-on:click.prevent=\"checkHash\"> Check Doc </button-->\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport database from '../firebase.js' //to log our data\n\nexport default {\n  name: \"app\",\n  computed: {\n      ...mapGetters(\"accounts\",[\"activeAccount\",\"activeBalance\"]),\n      ...mapGetters(\"drizzle\",[\"drizzleInstance\",\"isDrizzleInitialized\"]),\n  },\n  methods: {\n      async dummy() {\n          console.log(database);\n      },\n      showAcad() {\n          this.switch.acad = true;\n          this.switch.exp = false;\n      },\n      showExp() {\n          this.switch.acad = false;\n          this.switch.exp = true;\n      },\n      async claimAcad() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.acad.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.acad.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               }\n           });\n      },\n      async claimExp() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.exp.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then(async (docRef) => {\n                       this.res.docRef = docRef.id;\n                       await this.drizzleInstance\n                            .contracts\n                            .Credential\n                            .methods\n                            .createClaim(this.exp.inst, this.res.docRef)\n                            .send().then(async () => {\n                                this.res.success = true;\n                                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n                            }).catch(async (err) => {\n                                this.res.success = false;\n                                this.res.id = 0;\n                                console.log(err);\n                            });\n                   });\n               }\n           });\n      },\n      /*\n      async checkHash() {\n          var s = await this.drizzleInstance.contracts.Credential.methods.getStatus(this.res.id).call();\n          var hsh = await this.drizzleInstance.contracts.Credential.methods.viewClaim(this.res.id).call();\n          console.log(s);\n          console.log(hsh);\n      },*/\n  },\n  data() {\n      return {\n          // all these data will serve as arguments to our contract calls\n          switch: {\n              acad: true,\n              exp: false,\n          },\n          acad: {\n              inst: '',\n              addr: '',\n              modCode: '',\n              grade: '',\n          },\n          exp: {\n              inst: '',\n              addr: '',\n              startDate: '',\n              endDate: '',\n              performanceRating: '',\n              comments: '',\n          },\n          res: {\n            success: false,\n            id: 0,\n            docRef: '',\n          },\n      }\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.switch {\n    background-color: white;\n    color: black;\n    border: 2px solid black;\n    padding: 0px 5px 0px 5px;\n    margin: 0px 5px 0px 5px;\n    outline: none;\n}\n\nlabel {\n    display: inline-block;\n    width: 140px;\n    text-align: right;\n}\n</style>\n\n\n\n\n"]}]}