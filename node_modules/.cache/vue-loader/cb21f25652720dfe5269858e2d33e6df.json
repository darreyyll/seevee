{"remainingRequest":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/darylkoh/Downloads/seevee/src/components/CandidateClaim.vue","mtime":1617050334874},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/seevee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JwppbXBvcnQgZGF0YWJhc2UgZnJvbSAnLi4vZmlyZWJhc2UuanMnIC8vdG8gbG9nIG91ciBkYXRhCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImFwcCIsCiAgY29tcHV0ZWQ6IHsKICAgICAgLi4ubWFwR2V0dGVycygiYWNjb3VudHMiLFsiYWN0aXZlQWNjb3VudCIsImFjdGl2ZUJhbGFuY2UiXSksCiAgICAgIC4uLm1hcEdldHRlcnMoImRyaXp6bGUiLFsiZHJpenpsZUluc3RhbmNlIiwiaXNEcml6emxlSW5pdGlhbGl6ZWQiXSksCiAgfSwKICBtZXRob2RzOiB7CiAgICAgIGFzeW5jIGR1bW15KCkgewogICAgICAgICAgY29uc29sZS5sb2coZGF0YWJhc2UpOwogICAgICB9LAogICAgICBzaG93QWNhZCgpIHsKICAgICAgICAgIHRoaXMuc3dpdGNoLmFjYWQgPSB0cnVlOwogICAgICAgICAgdGhpcy5zd2l0Y2guZXhwID0gZmFsc2U7CiAgICAgIH0sCiAgICAgIHNob3dFeHAoKSB7CiAgICAgICAgICB0aGlzLnN3aXRjaC5hY2FkID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnN3aXRjaC5leHAgPSB0cnVlOwogICAgICB9LAogICAgICBhc3luYyBjbGFpbUFjYWQoKSB7CiAgICAgICAgICBhd2FpdCBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyh0aGlzLmFjdGl2ZUFjY291bnQpLmdldCgpLnRoZW4oZG9jID0+IHsKICAgICAgICAgICAgICAgaWYgKCFkb2MuZXhpc3RzKSB7CiAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyh0aGlzLmFjdGl2ZUFjY291bnQpLnNldCh7fSk7CiAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyh0aGlzLmFjdGl2ZUFjY291bnQpLmNvbGxlY3Rpb24oImFjYWRzIikuYWRkKHsKICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVBZGRyZXNzOiB0aGlzLmFjdGl2ZUFjY291bnQsCiAgICAgICAgICAgICAgICAgICAgICAgaW5zdGl0dXRpb25BZGRyZXNzOiB0aGlzLmFjYWQuaW5zdCwKICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVDb2RlOiB0aGlzLmFjYWQubW9kQ29kZSwKICAgICAgICAgICAgICAgICAgICAgICBncmFkZUF0dGFpbmVkOiB0aGlzLmFjYWQuZ3JhZGUsCiAgICAgICAgICAgICAgICAgICB9KS50aGVuKChkb2NSZWYpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcy5kb2NSZWYgPSBkb2NSZWYuaWQ7CiAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlLmNvbGxlY3Rpb24oInN0dWRlbnRzIikuZG9jKHRoaXMuYWN0aXZlQWNjb3VudCkuY29sbGVjdGlvbigiYWNhZHMiKS5hZGQoewogICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUFkZHJlc3M6IHRoaXMuYWN0aXZlQWNjb3VudCwKICAgICAgICAgICAgICAgICAgICAgICBpbnN0aXR1dGlvbkFkZHJlc3M6IHRoaXMuYWNhZC5pbnN0LAogICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZUNvZGU6IHRoaXMuYWNhZC5tb2RDb2RlLAogICAgICAgICAgICAgICAgICAgICAgIGdyYWRlQXR0YWluZWQ6IHRoaXMuYWNhZC5ncmFkZSwKICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKGRvY1JlZikgPT4gewogICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzLmRvY1JlZiA9IGRvY1JlZi5pZDsKICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgfSk7CiAgICAgICAgICBhd2FpdCB0aGlzLmRyaXp6bGVJbnN0YW5jZQogICAgICAgICAgICAuY29udHJhY3RzCiAgICAgICAgICAgIC5DcmVkZW50aWFsCiAgICAgICAgICAgIC5tZXRob2RzCiAgICAgICAgICAgIC5jcmVhdGVDbGFpbSh0aGlzLmFjYWQuaW5zdCwgdGhpcy5yZXMuZG9jUmVmKQogICAgICAgICAgICAuc2VuZCgpLnRoZW4oYXN5bmMgKCkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5yZXMuc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLnJlcy5pZCA9IGF3YWl0IHRoaXMuZHJpenpsZUluc3RhbmNlLmNvbnRyYWN0cy5DcmVkZW50aWFsLm1ldGhvZHMuZ2V0Q2xhaW1JZCgpLmNhbGwoKTsKICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgICAgICAgdGhpcy5yZXMuc3VjY2VzcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5yZXMuaWQgPSAwOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgICAgfSk7CiAgICAgIH0sCiAgICAgIGFzeW5jIGNsYWltRXhwKCkgewogICAgICAgICAgYXdhaXQgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2ModGhpcy5hY3RpdmVBY2NvdW50KS5nZXQoKS50aGVuKGRvYyA9PiB7CiAgICAgICAgICAgICAgIGlmICghZG9jLmV4aXN0cykgewogICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2ModGhpcy5hY3RpdmVBY2NvdW50KS5zZXQoe30pOwogICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbigic3R1ZGVudHMiKS5kb2ModGhpcy5hY3RpdmVBY2NvdW50KS5jb2xsZWN0aW9uKCJleHAiKS5hZGQoewogICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUFkZHJlc3M6IHRoaXMuYWN0aXZlQWNjb3VudCwKICAgICAgICAgICAgICAgICAgICAgICBpbnN0aXR1dGlvbkFkZHJlc3M6IHRoaXMuZXhwLmluc3QsCiAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlOiB0aGlzLmV4cC5zdGFydERhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZTogdGhpcy5leHAuZW5kRGF0ZSwKICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZVJhdGluZzogdGhpcy5leHAucGVyZm9ybWFuY2VSYXRpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHM6IHRoaXMuZXhwLmNvbW1lbnRzLAogICAgICAgICAgICAgICAgICAgfSkudGhlbigoZG9jUmVmKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXMuZG9jUmVmID0gZG9jUmVmLmlkOwogICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKCJzdHVkZW50cyIpLmRvYyh0aGlzLmFjdGl2ZUFjY291bnQpLmNvbGxlY3Rpb24oImV4cCIpLmFkZCh7CiAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlQWRkcmVzczogdGhpcy5hY3RpdmVBY2NvdW50LAogICAgICAgICAgICAgICAgICAgICAgIGluc3RpdHV0aW9uQWRkcmVzczogdGhpcy5leHAuaW5zdCwKICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGU6IHRoaXMuZXhwLnN0YXJ0RGF0ZSwKICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlOiB0aGlzLmV4cC5lbmREYXRlLAogICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlUmF0aW5nOiB0aGlzLmV4cC5wZXJmb3JtYW5jZVJhdGluZywKICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50czogdGhpcy5leHAuY29tbWVudHMsCiAgICAgICAgICAgICAgICAgICB9KS50aGVuKChkb2NSZWYpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcy5kb2NSZWYgPSBkb2NSZWYuaWQ7CiAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgfQogICAgICAgICAgIH0pOwogICAgICAgICAgYXdhaXQgdGhpcy5kcml6emxlSW5zdGFuY2UKICAgICAgICAgICAgLmNvbnRyYWN0cwogICAgICAgICAgICAuQ3JlZGVudGlhbAogICAgICAgICAgICAubWV0aG9kcwogICAgICAgICAgICAuY3JlYXRlQ2xhaW0odGhpcy5leHAuaW5zdCwgdGhpcy5yZXMuZG9jUmVmKQogICAgICAgICAgICAuc2VuZCgpLnRoZW4oYXN5bmMgKCkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5yZXMuc3VjY2VzcyA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLnJlcy5pZCA9IGF3YWl0IHRoaXMuZHJpenpsZUluc3RhbmNlLmNvbnRyYWN0cy5DcmVkZW50aWFsLm1ldGhvZHMuZ2V0Q2xhaW1JZCgpLmNhbGwoKTsKICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgICAgICAgdGhpcy5yZXMuc3VjY2VzcyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5yZXMuaWQgPSAwOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgICAgfSk7CiAgICAgIH0sCiAgfSwKICBkYXRhKCkgewogICAgICByZXR1cm4gewogICAgICAgICAgLy8gYWxsIHRoZXNlIGRhdGEgd2lsbCBzZXJ2ZSBhcyBhcmd1bWVudHMgdG8gb3VyIGNvbnRyYWN0IGNhbGxzCiAgICAgICAgICBzd2l0Y2g6IHsKICAgICAgICAgICAgICBhY2FkOiB0cnVlLAogICAgICAgICAgICAgIGV4cDogZmFsc2UsCiAgICAgICAgICB9LAogICAgICAgICAgYWNhZDogewogICAgICAgICAgICAgIGluc3Q6ICcnLAogICAgICAgICAgICAgIGFkZHI6ICcnLAogICAgICAgICAgICAgIG1vZENvZGU6ICcnLAogICAgICAgICAgICAgIGdyYWRlOiAnJywKICAgICAgICAgIH0sCiAgICAgICAgICBleHA6IHsKICAgICAgICAgICAgICBpbnN0OiAnJywKICAgICAgICAgICAgICBhZGRyOiAnJywKICAgICAgICAgICAgICBzdGFydERhdGU6ICcnLAogICAgICAgICAgICAgIGVuZERhdGU6ICcnLAogICAgICAgICAgICAgIHBlcmZvcm1hbmNlUmF0aW5nOiAnJywKICAgICAgICAgICAgICBjb21tZW50czogJycsCiAgICAgICAgICB9LAogICAgICAgICAgcmVzOiB7CiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLAogICAgICAgICAgICBpZDogMCwKICAgICAgICAgICAgZG9jUmVmOiAnJywKICAgICAgICAgIH0sCiAgICAgIH0KICB9LAp9Cg=="},{"version":3,"sources":["CandidateClaim.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"CandidateClaim.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n    <hdrCan></hdrCan>\n    <br><hr>\n    <p> <b> Claim </b> </p>\n    <button class=\"switch\" v-on:click=\"showAcad\"> Academic </button>\n    <button class=\"switch\" v-on:click=\"showExp\"> Expereince </button>\n    <div v-if=\"this.switch.acad\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"acad.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Module Code: </label>\n        <input type=\"text\" v-model=\"acad.modCode\" placeholder=\"Module Code\"/> <br>\n        <label> Grade: </label>\n        <input type=\"text\" v-model=\"acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <br>\n        <button v-on:click.prevent=\"claimAcad\"> Submit Academic Claim </button>\n    </form>\n    <br>\n    </div>\n    <div v-if=\"this.switch.exp\">\n    <br>\n    <form>\n        <label> Institution: </label>\n        <input type=\"text\" v-model=\"exp.inst\" placeholder=\"Institution Address\"/> <br>\n        <label> Start Date: </label>\n        <input type=\"text\" v-model=\"exp.startDate\" placeholder=\"Start Dates\"/> <br>\n        <label> End Date: </label>\n        <input type=\"text\" v-model=\"exp.endDate\" placeholder=\"End Date\"/> <br>\n        <!-- COMPANY WILL KEY IN THIS INFO???... DOESNT RLLY MAKE SENSE FOR CANDIDATE TO KEY THIS IN....-->\n        <!--label> Performance: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br>\n        <label> Comments: </label>\n        <input type=\"text\" v-model=\"this.acad.grade\" placeholder=\"Attained Grade\"/> <br-->\n        <br>\n        <button v-on:click.prevent=\"claimExp\"> Submit Experience Claim </button>\n    </form>\n    <br>\n    </div>\n    <hr>\n    <div v-if=\"this.res.success\">\n    <p> Credential claim submitted successfully. <b> Your claim id is: <u> {{this.res.id}} </u> </b> </p>\n    </div>\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport database from '../firebase.js' //to log our data\n\nexport default {\n  name: \"app\",\n  computed: {\n      ...mapGetters(\"accounts\",[\"activeAccount\",\"activeBalance\"]),\n      ...mapGetters(\"drizzle\",[\"drizzleInstance\",\"isDrizzleInitialized\"]),\n  },\n  methods: {\n      async dummy() {\n          console.log(database);\n      },\n      showAcad() {\n          this.switch.acad = true;\n          this.switch.exp = false;\n      },\n      showExp() {\n          this.switch.acad = false;\n          this.switch.exp = true;\n      },\n      async claimAcad() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"acads\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.acad.inst,\n                       moduleCode: this.acad.modCode,\n                       gradeAttained: this.acad.grade,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               }\n           });\n          await this.drizzleInstance\n            .contracts\n            .Credential\n            .methods\n            .createClaim(this.acad.inst, this.res.docRef)\n            .send().then(async () => {\n                this.res.success = true;\n                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n            }).catch((err) => {\n                this.res.success = false;\n                this.res.id = 0;\n                console.log(err);\n            });\n      },\n      async claimExp() {\n          await database.collection(\"students\").doc(this.activeAccount).get().then(doc => {\n               if (!doc.exists) {\n                   database.collection(\"students\").doc(this.activeAccount).set({});\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               } else {\n                   database.collection(\"students\").doc(this.activeAccount).collection(\"exp\").add({\n                       candidateAddress: this.activeAccount,\n                       institutionAddress: this.exp.inst,\n                       startDate: this.exp.startDate,\n                       endDate: this.exp.endDate,\n                       performanceRating: this.exp.performanceRating,\n                       comments: this.exp.comments,\n                   }).then((docRef) => {\n                       this.res.docRef = docRef.id;\n                   });\n               }\n           });\n          await this.drizzleInstance\n            .contracts\n            .Credential\n            .methods\n            .createClaim(this.exp.inst, this.res.docRef)\n            .send().then(async () => {\n                this.res.success = true;\n                this.res.id = await this.drizzleInstance.contracts.Credential.methods.getClaimId().call();\n            }).catch((err) => {\n                this.res.success = false;\n                this.res.id = 0;\n                console.log(err);\n            });\n      },\n  },\n  data() {\n      return {\n          // all these data will serve as arguments to our contract calls\n          switch: {\n              acad: true,\n              exp: false,\n          },\n          acad: {\n              inst: '',\n              addr: '',\n              modCode: '',\n              grade: '',\n          },\n          exp: {\n              inst: '',\n              addr: '',\n              startDate: '',\n              endDate: '',\n              performanceRating: '',\n              comments: '',\n          },\n          res: {\n            success: false,\n            id: 0,\n            docRef: '',\n          },\n      }\n  },\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n.switch {\n    background-color: white;\n    color: black;\n    border: 2px solid black;\n    padding: 0px 5px 0px 5px;\n    margin: 0px 5px 0px 5px;\n    outline: none;\n}\n\nlabel {\n    display: inline-block;\n    width: 140px;\n    text-align: right;\n}\n</style>\n\n\n\n\n"]}]}