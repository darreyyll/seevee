{"remainingRequest":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/src/App.vue","mtime":1616147543773},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darylkoh/Downloads/IS4302 PROJECT/AAA_TEST_20210317/VUE APP/seevee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}